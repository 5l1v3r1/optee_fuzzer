diff --git a/libteec/src/tee_client_api.c b/libteec/src/tee_client_api.c
index 698092b..0384e04 100644
--- a/libteec/src/tee_client_api.c
+++ b/libteec/src/tee_client_api.c
@@ -40,6 +40,7 @@
 #include <tee_client_api.h>
 #include <teec_trace.h>
 #include <unistd.h>
+#include <assert.h>
 
 #ifndef __aligned
 #define __aligned(x) __attribute__((__aligned__(x)))
@@ -130,7 +131,8 @@ static int teec_shm_register(int fd, void *buf, size_t size, int *id)
 	return shm_fd;
 }
 
-TEEC_Result TEEC_InitializeContext(const char *name, TEEC_Context *ctx)
+TEEC_Result _TEEC_InitializeContext(const char *name, TEEC_Context *ctx);
+TEEC_Result _TEEC_InitializeContext(const char *name, TEEC_Context *ctx)
 {
 	char devname[PATH_MAX];
 	int fd;
@@ -154,7 +156,8 @@ TEEC_Result TEEC_InitializeContext(const char *name, TEEC_Context *ctx)
 	return TEEC_ERROR_ITEM_NOT_FOUND;
 }
 
-void TEEC_FinalizeContext(TEEC_Context *ctx)
+void _TEEC_FinalizeContext(TEEC_Context *ctx);
+void _TEEC_FinalizeContext(TEEC_Context *ctx)
 {
 	if (ctx)
 		close(ctx->fd);
@@ -476,7 +479,11 @@ static void uuid_to_octets(uint8_t d[TEE_IOCTL_UUID_LEN], const TEEC_UUID *s)
 	memcpy(d + 8, s->clockSeqAndNode, sizeof(s->clockSeqAndNode));
 }
 
-TEEC_Result TEEC_OpenSession(TEEC_Context *ctx, TEEC_Session *session,
+TEEC_Result _TEEC_OpenSession(TEEC_Context *ctx, TEEC_Session *session,
+			const TEEC_UUID *destination,
+			uint32_t connection_method, const void *connection_data,
+			TEEC_Operation *operation, uint32_t *ret_origin);
+TEEC_Result _TEEC_OpenSession(TEEC_Context *ctx, TEEC_Session *session,
 			const TEEC_UUID *destination,
 			uint32_t connection_method, const void *connection_data,
 			TEEC_Operation *operation, uint32_t *ret_origin)
@@ -540,7 +547,8 @@ out:
 	return res;
 }
 
-void TEEC_CloseSession(TEEC_Session *session)
+void _TEEC_CloseSession(TEEC_Session *session);
+void _TEEC_CloseSession(TEEC_Session *session)
 {
 	struct tee_ioctl_close_session_arg arg;
 
@@ -779,3 +787,183 @@ void TEEC_ReleaseSharedMemory(TEEC_SharedMemory *shm)
 	shm->registered_fd = -1;
 	shm->buffer_allocated = false;
 }
+
+// ------- AFL -------
+
+#define AFL_UUID \
+		{ 0xd96a5b41, 0xe2c8, 0xb1af, { 0x87, 0x94, 0x10, 0x03, 0xa5, 0xd5, 0xc7, 0x1b } }
+
+#define AFL_PTA_CMD_ENABLE_SVC_TRACE		0
+#define AFL_PTA_CMD_DISABLE_SVC_TRACE		1
+
+TEEC_Session g_svc_log_sess;
+uint32_t g_svc_log_sessions = 0;
+
+TEEC_Result TEEC_InitializeContext(const char *name, TEEC_Context *ctx) {
+	TEEC_Result res = _TEEC_InitializeContext(name, ctx);
+
+	if (res != TEEC_SUCCESS) {
+		EMSG("TEEC_InitializeContext failed with code 0x%x", res);
+
+		return res;
+	}
+
+	return res;
+}
+
+void TEEC_FinalizeContext(TEEC_Context *ctx) {
+	_TEEC_FinalizeContext(ctx);
+}
+
+TEEC_Result TEEC_OpenSession(TEEC_Context *ctx, TEEC_Session *session,
+							  const TEEC_UUID *destination,
+							  uint32_t connection_method, const void *connection_data,
+							  TEEC_Operation *operation, uint32_t *ret_origin) {
+	TEEC_Result res;
+
+	res = _TEEC_OpenSession(ctx, session, destination, connection_method, connection_data, operation, ret_origin);
+
+	if (res == TEEC_SUCCESS && getenv("AFL_TRACE_SVC") != NULL) {
+		TEEC_UUID uuid = AFL_UUID;
+		uint32_t err_origin;
+
+		if (g_svc_log_sessions == 0) {
+			res = _TEEC_OpenSession(ctx, &g_svc_log_sess, &uuid, TEEC_LOGIN_PUBLIC, NULL, NULL, &err_origin);
+
+			if (res != TEEC_SUCCESS) {
+				EMSG("TEEC_Opensession failed with code 0x%x origin 0x%x", res, err_origin);
+
+				return res;
+			}
+		}
+
+		g_svc_log_sessions++;
+
+		TEEC_Operation op = {0};
+		op.paramTypes = TEEC_PARAM_TYPES(TEEC_VALUE_INPUT, 
+										 TEEC_NONE, 
+										 TEEC_NONE, 
+										 TEEC_NONE);
+
+		op.params[0].value.a = session->session_id;
+
+		res = TEEC_InvokeCommand(&g_svc_log_sess, AFL_PTA_CMD_ENABLE_SVC_TRACE, &op, &err_origin);
+		if (res != TEEC_SUCCESS) {
+			EMSG("TEEC_InvokeCommand failed with code 0x%x origin 0x%x", res, err_origin);
+
+			return res;
+		}
+	}
+
+	return res;
+}
+
+void TEEC_CloseSession(TEEC_Session *session) {
+	if (!session)
+		return;
+
+	if (getenv("AFL_TRACE_SVC") != NULL) {
+		TEEC_Result res;
+
+		uint32_t err_origin;
+
+		assert(g_svc_log_sessions > 0);
+
+		uint32_t buf_len = 64 * 1024;
+		char *buf = malloc(buf_len);
+
+		TEEC_Operation op = {0};
+		op.paramTypes = TEEC_PARAM_TYPES(TEEC_VALUE_INPUT,
+										 TEEC_MEMREF_TEMP_OUTPUT, 
+										 TEEC_NONE, 
+										 TEEC_NONE);
+
+		op.params[0].value.a = session->session_id;
+
+		op.params[1].tmpref.buffer = buf;
+		op.params[1].tmpref.size = buf_len;
+
+		res = TEEC_InvokeCommand(&g_svc_log_sess, AFL_PTA_CMD_DISABLE_SVC_TRACE, &op, &err_origin);
+		if (res != TEEC_SUCCESS) {
+			EMSG("TEEC_InvokeCommand failed with code 0x%x origin 0x%x", res, err_origin);
+			abort();
+		}
+
+		if (op.params[1].tmpref.size > 0) {
+			char *file_name = tempnam(getenv("AFL_TRACE_SVC"), NULL);
+
+			printf("Write trace to %s\n", file_name);
+
+			FILE *f = fopen(file_name, "wb");
+			fwrite(buf, op.params[1].tmpref.size, 1, f);
+			fclose(f);
+
+			free(file_name);
+		}
+		else {
+			printf("No data in trace buffer!\n");
+		}
+
+		free(buf);
+
+		g_svc_log_sessions--;
+
+		if (g_svc_log_sessions == 0) {
+			_TEEC_CloseSession(&g_svc_log_sess);
+		}
+	}
+
+	_TEEC_CloseSession(session);
+}
\ No newline at end of file
